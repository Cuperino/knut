// File generated by spec2cpp tool
// DO NOT MAKE ANY CHANGES HERE

#pragma once

#include "requestmessage.h"
#include "types.h"

namespace Lsp {

inline constexpr char InitializeName[] = "initialize";
struct InitializeRequest : public RequestMessage<InitializeName, InitializeParams, InitializeResult, InitializeError>
{
};

inline constexpr char ShutdownName[] = "shutdown";
struct ShutdownRequest : public RequestMessage<ShutdownName, std::nullptr_t, std::nullptr_t, std::nullptr_t>
{
};

inline constexpr char ShowMessageRequestName[] = "window/showMessageRequest";
struct ShowMessageRequestRequest
    : public RequestMessage<ShowMessageRequestName, ShowMessageRequestParams,
                            std::variant<MessageActionItem, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char ShowDocumentName[] = "window/showDocument";
struct ShowDocumentRequest
    : public RequestMessage<ShowDocumentName, ShowDocumentParams, ShowDocumentResult, std::nullptr_t>
{
};

inline constexpr char WorkDoneProgressCreateName[] = "window/workDoneProgress/create";
struct WorkDoneProgressCreateRequest
    : public RequestMessage<WorkDoneProgressCreateName, WorkDoneProgressCreateParams, std::nullptr_t, std::nullptr_t>
{
};

inline constexpr char RegisterCapabilityName[] = "client/registerCapability";
struct RegisterCapabilityRequest
    : public RequestMessage<RegisterCapabilityName, RegistrationParams, std::nullptr_t, std::nullptr_t>
{
};

inline constexpr char UnregisterCapabilityName[] = "client/unregisterCapability";
struct UnregisterCapabilityRequest
    : public RequestMessage<UnregisterCapabilityName, UnregistrationParams, std::nullptr_t, std::nullptr_t>
{
};

inline constexpr char WorkspaceFoldersName[] = "workspace/workspaceFolders";
struct WorkspaceFoldersRequest
    : public RequestMessage<WorkspaceFoldersName, std::nullptr_t,
                            std::variant<std::vector<WorkspaceFolder>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char ConfigurationName[] = "workspace/configuration";
struct ConfigurationRequest
    : public RequestMessage<ConfigurationName, ConfigurationParams, std::vector<nlohmann::json>, std::nullptr_t>
{
};

inline constexpr char SymbolName[] = "workspace/symbol";
struct SymbolRequest
    : public RequestMessage<SymbolName, WorkspaceSymbolParams,
                            std::variant<std::vector<SymbolInformation>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char ApplyEditName[] = "workspace/applyEdit";
struct ApplyEditRequest
    : public RequestMessage<ApplyEditName, ApplyWorkspaceEditParams, ApplyWorkspaceEditResponse, std::nullptr_t>
{
};

inline constexpr char WillCreateFilesName[] = "workspace/willCreateFiles";
struct WillCreateFilesRequest : public RequestMessage<WillCreateFilesName, CreateFilesParams,
                                                      std::variant<WorkspaceEdit, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char WillRenameFilesName[] = "workspace/willRenameFiles";
struct WillRenameFilesRequest : public RequestMessage<WillRenameFilesName, RenameFilesParams,
                                                      std::variant<WorkspaceEdit, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char WillDeleteFilesName[] = "workspace/willDeleteFiles";
struct WillDeleteFilesRequest : public RequestMessage<WillDeleteFilesName, DeleteFilesParams,
                                                      std::variant<WorkspaceEdit, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char WillSaveWaitUntilName[] = "textDocument/willSaveWaitUntil";
struct WillSaveWaitUntilRequest
    : public RequestMessage<WillSaveWaitUntilName, WillSaveTextDocumentParams,
                            std::variant<std::vector<TextEdit>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char CompletionName[] = "textDocument/completion";
struct CompletionRequest
    : public RequestMessage<CompletionName, CompletionParams,
                            std::variant<std::vector<CompletionItem>, CompletionList, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char CompletionItemResolveName[] = "completionItem/resolve";
struct CompletionItemResolveRequest
    : public RequestMessage<CompletionItemResolveName, CompletionItem, CompletionItem, std::nullptr_t>
{
};

inline constexpr char HoverName[] = "textDocument/hover";
struct HoverRequest : public RequestMessage<HoverName, HoverParams, std::variant<Hover, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char SignatureHelpName[] = "textDocument/signatureHelp";
struct SignatureHelpRequest : public RequestMessage<SignatureHelpName, SignatureHelpParams,
                                                    std::variant<SignatureHelp, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char DeclarationName[] = "textDocument/declaration";
struct DeclarationRequest
    : public RequestMessage<DeclarationName, DeclarationParams,
                            std::variant<Location, std::vector<Location>, std::vector<LocationLink>, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char DefinitionName[] = "textDocument/definition";
struct DefinitionRequest
    : public RequestMessage<DefinitionName, DefinitionParams,
                            std::variant<Location, std::vector<Location>, std::vector<LocationLink>, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char TypeDefinitionName[] = "textDocument/typeDefinition";
struct TypeDefinitionRequest
    : public RequestMessage<TypeDefinitionName, TypeDefinitionParams,
                            std::variant<Location, std::vector<Location>, std::vector<LocationLink>, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char ImplementationName[] = "textDocument/implementation";
struct ImplementationRequest
    : public RequestMessage<ImplementationName, ImplementationParams,
                            std::variant<Location, std::vector<Location>, std::vector<LocationLink>, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char ReferencesName[] = "textDocument/references";
struct ReferencesRequest : public RequestMessage<ReferencesName, ReferenceParams,
                                                 std::variant<std::vector<Location>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char DocumentHighlightName[] = "textDocument/documentHighlight";
struct DocumentHighlightRequest
    : public RequestMessage<DocumentHighlightName, DocumentHighlightParams,
                            std::variant<std::vector<DocumentHighlight>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char DocumentSymbolName[] = "textDocument/documentSymbol";
struct DocumentSymbolRequest
    : public RequestMessage<DocumentSymbolName, DocumentSymbolParams,
                            std::variant<std::vector<DocumentSymbol>, std::vector<SymbolInformation>, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char CodeActionName[] = "textDocument/codeAction";
struct CodeActionRequest
    : public RequestMessage<CodeActionName, CodeActionParams,
                            std::variant<std::vector<std::variant<Command, CodeAction>>, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char CodeActionResolveName[] = "codeAction/resolve";
struct CodeActionResolveRequest : public RequestMessage<CodeActionResolveName, CodeAction, CodeAction, std::nullptr_t>
{
};

inline constexpr char CodeLensName[] = "textDocument/codeLens";
struct CodeLensRequest : public RequestMessage<CodeLensName, CodeLensParams,
                                               std::variant<std::vector<CodeLens>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char CodeLensResolveName[] = "codeLens/resolve";
struct CodeLensResolveRequest : public RequestMessage<CodeLensResolveName, CodeLens, CodeLens, std::nullptr_t>
{
};

inline constexpr char CodeLensRefreshName[] = "workspace/codeLens/refresh";
struct CodeLensRefreshRequest
    : public RequestMessage<CodeLensRefreshName, std::nullptr_t, std::nullptr_t, std::nullptr_t>
{
};

inline constexpr char DocumentLinkName[] = "textDocument/documentLink";
struct DocumentLinkRequest
    : public RequestMessage<DocumentLinkName, DocumentLinkParams,
                            std::variant<std::vector<DocumentLink>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char DocumentLinkResolveName[] = "documentLink/resolve";
struct DocumentLinkResolveRequest
    : public RequestMessage<DocumentLinkResolveName, DocumentLink, DocumentLink, std::nullptr_t>
{
};

inline constexpr char DocumentColorName[] = "textDocument/documentColor";
struct DocumentColorRequest
    : public RequestMessage<DocumentColorName, DocumentColorParams, std::vector<ColorInformation>, std::nullptr_t>
{
};

inline constexpr char ColorPresentationName[] = "textDocument/colorPresentation";
struct ColorPresentationRequest : public RequestMessage<ColorPresentationName, ColorPresentationParams,
                                                        std::vector<ColorPresentation>, std::nullptr_t>
{
};

inline constexpr char FormattingName[] = "textDocument/formatting";
struct FormattingRequest : public RequestMessage<FormattingName, DocumentFormattingParams,
                                                 std::variant<std::vector<TextEdit>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char RangeFormattingName[] = "textDocument/rangeFormatting";
struct RangeFormattingRequest
    : public RequestMessage<RangeFormattingName, DocumentRangeFormattingParams,
                            std::variant<std::vector<TextEdit>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char OnTypeFormattingName[] = "textDocument/onTypeFormatting";
struct OnTypeFormattingRequest
    : public RequestMessage<OnTypeFormattingName, DocumentOnTypeFormattingParams,
                            std::variant<std::vector<TextEdit>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char RenameName[] = "textDocument/rename";
struct RenameRequest
    : public RequestMessage<RenameName, RenameParams, std::variant<WorkspaceEdit, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char PrepareRenameName[] = "textDocument/prepareRename";
struct PrepareRenameRequest
    : public RequestMessage<PrepareRenameName, PrepareRenameParams,
                            std::variant<Range, RenamePlaceHolder, RenameDefaultBehavior, std::nullptr_t>,
                            std::nullptr_t>
{
};

inline constexpr char FoldingRangeName[] = "textDocument/foldingRange";
struct FoldingRangeRequest
    : public RequestMessage<FoldingRangeName, FoldingRangeParams,
                            std::variant<std::vector<FoldingRange>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char SelectionRangeName[] = "textDocument/selectionRange";
struct SelectionRangeRequest
    : public RequestMessage<SelectionRangeName, SelectionRangeParams,
                            std::variant<std::vector<SelectionRange>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char PrepareCallHierarchyName[] = "textDocument/prepareCallHierarchy";
struct PrepareCallHierarchyRequest
    : public RequestMessage<PrepareCallHierarchyName, CallHierarchyPrepareParams,
                            std::variant<std::vector<CallHierarchyItem>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char CallHierarchyIncomingCallsName[] = "callHierarchy/incomingCalls";
struct CallHierarchyIncomingCallsRequest
    : public RequestMessage<CallHierarchyIncomingCallsName, CallHierarchyIncomingCallsParams,
                            std::variant<std::vector<CallHierarchyIncomingCall>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char CallHierarchyOutgoingCallsName[] = "callHierarchy/outgoingCalls";
struct CallHierarchyOutgoingCallsRequest
    : public RequestMessage<CallHierarchyOutgoingCallsName, CallHierarchyOutgoingCallsParams,
                            std::variant<std::vector<CallHierarchyOutgoingCall>, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char SemanticTokensFullName[] = "textDocument/semanticTokens/full";
struct SemanticTokensFullRequest : public RequestMessage<SemanticTokensFullName, SemanticTokensParams,
                                                         std::variant<SemanticTokens, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char SemanticTokensFullDeltaName[] = "textDocument/semanticTokens/full/delta";
struct SemanticTokensFullDeltaRequest
    : public RequestMessage<SemanticTokensFullDeltaName, SemanticTokensDeltaParams,
                            std::variant<SemanticTokens, SemanticTokensDelta, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char SemanticTokensRangeName[] = "textDocument/semanticTokens/range";
struct SemanticTokensRangeRequest : public RequestMessage<SemanticTokensRangeName, SemanticTokensRangeParams,
                                                          std::variant<SemanticTokens, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char SemanticTokensRefreshName[] = "workspace/semanticTokens/refresh";
struct SemanticTokensRefreshRequest
    : public RequestMessage<SemanticTokensRefreshName, std::nullptr_t, std::nullptr_t, std::nullptr_t>
{
};

inline constexpr char LinkedEditingRangeName[] = "textDocument/linkedEditingRange";
struct LinkedEditingRangeRequest
    : public RequestMessage<LinkedEditingRangeName, LinkedEditingRangeParams,
                            std::variant<LinkedEditingRanges, std::nullptr_t>, std::nullptr_t>
{
};

inline constexpr char MonikerName[] = "textDocument/moniker";
struct MonikerRequest : public RequestMessage<MonikerName, MonikerParams,
                                              std::variant<std::vector<Moniker>, std::nullptr_t>, std::nullptr_t>
{
};
}
