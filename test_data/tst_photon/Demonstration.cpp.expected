//Going to leave out some boilerplate declarations and initialization
int main()
{
    //Create a PtWindow
    QMainWindow *window = new QMainWindow(0);

    //Set some resources (or in Qt, properties) of the window
    QPoint pos = { 10, 20 };
    window->setTitle("Hello World");
    window->move(&pos);

    //Many common callbacks can be converted into signal-slot connections
    connect(textWidget, SIGNAL(textChanged(QString)), cbTextChanged);
    connect(numericWidget, SIGNAL(valueChanged(int)), cbNumericChanged)/*KDAB_NOTE: Callback data was userData*/;

    //Create a PtButton, this time use some Pt_ARGs to initialize
    int n;
    QPushButton *QPushButton1 = new QPushButton(window);
    n = 0;
    QPushButton1->setText("Press to exit");
    QPushButton1->setFont(Helvetica14);
    connect(QPushButton1, SIGNAL(clicked(bool)), callbacks) /*Num callbacks (duplicate connection for each): sizeof(callbacks)/sizeof(callbacks[0])*/;

    //Individual flags also can be translated
    //Also shown here: automatic translation from Phab widget access to ui widget access (see also: automated Phab project conversion)
    ui->SomeWidget->setCheckable(true);
    ui->SomeWidget->setFocusPolicy(Qt::NoFocus);
    ui->SomeWidget->setDisabled(true);

    //Sometimes there are multiple conversion possibilities
    ui->SomeWidget->setPixmap(someImage);

    //There is also getting resources/properties
    someStr = ui->SomeWidget->text();

    n = 0;
    pos = AbWidgets[ABN_SomeOtherWidget]->pos();
    dim = AbWidgets[ABN_SomeOtherWidget]->size();
    //If using the non-pointer method, we need to create a declaration manually, so leave a note
    KDAB_FIX_DECL = AbWidgets[ABN_SomeOtherWidget]->size();

    //Standard Photon functions often are directly comparable to Qt
    ui->SomeWidget->show();
    ui->SomeWidget->raise();
    ui->SomeWidget->deleteLater();
    QCoreApplication::processEvents();

    //People are still an indispensible part of the conversion process, of course, but we
    //already have experience with many of the potential pitfalls and the available solutions
    ui->SomeWidget->KDAB_FIX_SETTER_Pt_ARG_LABEL_TYPE(Pt_IMAGE) /*Note that Pt_TEXT_IMAGE type is not a QLabel*/;
    someInt = ui->SomeWidget->KDAB_FIX_GETTER_Pt_ARG_LABEL_TYPE() /*N/A for QLabel*/;
    someTreeWidget->expandItem(item) /*KDAB_NOTE: KDAB_NOTE: Unlike in photon, the tree must be valid to expand an item. Verify that "someEvent" did not perform a special function. */;

    //KDAB also has a library of custom functions to replace certain common Photon patterns
    //For a simple example, in Qt, this requires getting the widget palette, changing it, and then setting it again
    kdab_setWidgetColor(widget, Qt::red, widget->backgroundRole());
    color = kdab_getWidgetColor(widget, widget->backgroundRole());

    //In Photon, start and end flux have to be used around functions that might cause lots of repainting
    //In Qt, however, by default it will only repaint once for any number of updates, when it gets back to the event loop
    //KDAB_NOTE: PtStartFlux should not be needed, widget painting happens in the event loop
    ui->SomeWidget->update();
    MakeLotsOfChangesTo(ui->SomeWidget);
    //KDAB_NOTE: PtEndFlux should not be needed, widget painting happens in the event loop

    //Photon lists are 1-based, whereas in Qt they are 0-based
    widget->insertItems(pos - 1, listItemStrings) /*KDAB_NOTE: array count = numListItemStrings*/;
    widget->scrollTo( widget->model()->index(i - 1, 0));
    widget->clear();
}
