//Going to leave out some boilerplate declarations and initialization
int main()
{
    //Create a PtWindow
    PtWidget_t *window;
    window = PtCreateWidget(PtWindow, Pt_NO_PARENT, 0, NULL);

    //Set some resources (or in Qt, properties) of the window
    PhPoint_t pos = { 10, 20 };
    PtSetResource(window, Pt_ARG_WINDOW_TITLE, "Hello World", 0);
    PtSetResource(window, Pt_ARG_POS, &pos, 0);

    //Many common callbacks can be converted into signal-slot connections
    PtAddCallback(textWidget, Pt_CB_TEXT_CHANGED, cbTextChanged, 0);
    PtAddCallback(numericWidget, Pt_CB_NUMERIC_CHANGED, cbNumericChanged, userData);

    //Create a PtButton, this time use some Pt_ARGs to initialize
    int n;
    n = 0;
    PtSetArg(&args[n++], Pt_ARG_TEXT_STRING, "Press to exit", 0);
    PtSetArg(&args[n++], Pt_ARG_TEXT_FONT, Helvetica14, 0);
    PtSetArg(&args[n++], Pt_CB_ACTIVATE, callbacks, sizeof(callbacks)/sizeof(callbacks[0]));
    PtCreateWidget(PtButton, window, n, args);

    //Individual flags also can be translated
    //Also shown here: automatic translation from Phab widget access to ui widget access (see also: automated Phab project conversion)
    PtSetResource(ABW_SomeWidget, Pt_ARG_FLAGS, Pt_TRUE, Pt_TOGGLE);
    PtSetResource(ABW_SomeWidget, Pt_ARG_FLAGS, Pt_FALSE, Pt_GETS_FOCUS);
    PtSetResource(ABW_SomeWidget, Pt_ARG_FLAGS, Pt_TRUE, Pt_BLOCKED);

    //Sometimes there are multiple conversion possibilities
    PtSetResource(ABW_SomeWidget, Pt_ARG_LABEL_IMAGE, someImage, 0);

    //There is also getting resources/properties
    PtGetResource(ABW_SomeWidget, Pt_ARG_TEXT_STRING, &someStr, 0);

    n = 0;
    PtSetArg(&args[n++], Pt_ARG_POS, &pos, 0);
    PtSetArg(&args[n++], Pt_ARG_DIM, &dim, 0);
    //If using the non-pointer method, we need to create a declaration manually, so leave a note
    PtSetArg(&args[n++], Pt_ARG_DIM, 0, 0);
    PtGetResources(AbWidgets[ABN_SomeOtherWidget], n, args);

    //Standard Photon functions often are directly comparable to Qt
    PtRealizeWidget(ABW_SomeWidget);
    PtWindowToFront(ABW_SomeWidget);
    PtDestroyWidget(ABW_SomeWidget);
    PtBkgdHandlerProcess();

    //People are still an indispensible part of the conversion process, of course, but we
    //already have experience with many of the potential pitfalls and the available solutions
    PtSetResource(ABW_SomeWidget, Pt_ARG_LABEL_TYPE, Pt_IMAGE, 0);
    PtGetResource(ABW_SomeWidget, Pt_ARG_LABEL_TYPE, &someInt, 0);
    PtTreeExpand(someTreeWidget, item, someEvent);

    //KDAB also has a library of custom functions to replace certain common Photon patterns
    //For a simple example, in Qt, this requires getting the widget palette, changing it, and then setting it again
    PtSetResource( widget, Pt_ARG_FILL_COLOR, Pg_RED, 0);
    PtGetResource( widget, Pt_ARG_FILL_COLOR, &color, 0);

    //In Photon, start and end flux have to be used around functions that might cause lots of repainting
    //In Qt, however, by default it will only repaint once for any number of updates, when it gets back to the event loop
    PtStartFlux(ABW_SomeWidget);
    PtDamageWidget(ABW_SomeWidget);
    MakeLotsOfChangesTo(ABW_SomeWidget);
    PtEndFlux(ABW_SomeWidget);

    //Photon lists are 1-based, whereas in Qt they are 0-based
    PtListAddItems(widget, listItemStrings, numListItemStrings, pos);
    PtListShowPos((PtWidget_t*)widget, i );
    PtListDeleteAllItems( widget );
}
